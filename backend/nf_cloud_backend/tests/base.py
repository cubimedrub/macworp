import csv
import os
from pathlib import Path
from unittest import TestCase
import unittest
from httpx import URL, Request, Response
from typing import Any

from fastapi.testclient import TestClient
from sqlmodel import SQLModel, Session

from .constants import *
from ..main import app, engine
from .. import database

class DontCare:
    def __init__(self):
        pass

    def __str__(self):
        return "..."

DONT_CARE = DontCare()
"""
Special object that matches any JSON value.
"""

PartialJson = None | bool | int | float | str | list["PartialJson"] | dict[str, "PartialJson"] | DontCare
"""
Can be a JSON value or the special value DONT_CARE, which signifies that any value present is fine.
"""

def match_partial_json(actual: Any, expected: PartialJson) -> bool:
    """
    Returns true if actual is a JSON value that matches the specification given by expected.
    """

    if isinstance(expected, DontCare):
        return True    
    if isinstance(actual, list) and isinstance(expected, list):
        if len(actual) != len(expected):
            return False
        for i in range(len(actual)):
            if not match_partial_json(actual[i], expected[i]):
                return False
        return True
    if isinstance(actual, dict) and isinstance(expected, dict):
        if actual.keys() != expected.keys():
            return False
        for key in actual.keys():
            if not match_partial_json(actual[key], expected[key]):
                return False
        return True
    return actual == expected


def endpoint(path: str):
    url = os.getenv("MACWORP_TEST_URL") or ""
    return url + path


class LogEntry:
    """
    Represents what is logged for each HTTP request sent to the app.
    """

    request: Request
    status: int
    json: Any
    login: UserLogin | None

    def __init__(self, request: Request, status: int, json: Any, login: UserLogin | None):
        self.request = request
        self.status = status
        self.json = json
        self.login = login


class Test(unittest.TestCase):
    """
    The abstract base for all MaCWorP tests.
    """

    client: TestClient
    """
    The FastAPI test client; capable of sending HTTP requests to the app.
    """

    logs: list[LogEntry]
    """
    Logs generated by this test.
    """

    token_cache: dict[str, str]
    """
    Maps user login IDs to tokens.
    
    This is cached to allow making authentication implicit without cluttering up the logs with repeated auth requests.
    """


    # UTILITY METHODS


    def send(self, request: Request, status: int, json: PartialJson, login: UserLogin | None = None) -> Response:
        """
        Sends a HTTP request to the app, and ensures that it returns the correct status code and JSON.
        The request is appended to the logs.
        """

        print("Sending request:", request)
        response = self.client.send(request)
        actual_status = response.status_code
        actual_json = response.json()
        print("Got response:", actual_status, actual_json)
        
        self.assert_(match_partial_json(actual_json, json), f"JSON doesn't match: Expected {json}, got {actual_json}") 
        self.assertEqual(actual_status, status, f"Status doesn't match: Expected {status}, got {actual_status}")
        self.logs.append(LogEntry(request, actual_status, actual_json, login))
        return response
    

    def get_token(self, login: UserLogin) -> str:
        """
        Returns the token for the given user.
        The token is cached, so only one authentication request will be performed for each user.
        """
        
        if login.login_id not in self.token_cache:
            self.token_cache[login.login_id] = self.send(
                Request(
                    "POST",
                    "https://localhost:8000/users/login/file/dev",
                    json={
                        "login_id": login.login_id,
                        "password": login.password
                    }),
                200,
                { "jwt": DONT_CARE }
            ).json()["jwt"]
        return self.token_cache[login.login_id]
    

    def as_user(self, login: UserLogin | None, request: Request, status: int, json: PartialJson):
        """
        Executes a request as the given user.
        """

        if login is not None:
            request.headers["X-Token"] = self.get_token(login)
        return self.send(request, status, json, login)


    def as_default(self, request: Request, status: int, json: PartialJson) -> Response:
        """
        Executes a request as the seeded default user.
        """
        
        return self.as_user(DEFAULT_LOGIN, request, status, json)
            

    def as_admin(self, request: Request, status: int, json: PartialJson) -> Response:
        """
        Executes a request as the seeded admin user.
        """

        return self.as_user(ADMIN_LOGIN, request, status, json)
    

    # FRAMEWORK

    def setUp(self):
        """
        Performed before each test. Clears and seeds the test database.
        """

        seed_data_path = os.getenv("MACWORP_TEST_SEED_DATA")
        if (seed_data_path is None):
            raise RuntimeError("MACWORP_TEST_SEED_DATA environment variable not set")
        
        
        SQLModel.metadata.drop_all(engine)
        database.reset_engine()
        SQLModel.metadata.create_all(engine)

        self.logs = []
        self.token_cache = {}
        self.client = TestClient(app)

        database.seed(Path(seed_data_path))

    
    def tearDown(self):
        """
        Performed after each test. Logs test metadata and all HTTP communication that was done in the test.
        """

        log_path = os.getenv("MACWORP_TEST_LOG")
        if log_path is not None:
            self.update_logs(Path(log_path))
        
        self.client.close()
        SQLModel.metadata.drop_all(engine)
    

    def update_logs(self, path: Path):
        """
        Writes logs for this test to CSV.
        """
        
        file_exists = os.path.isfile(path)
        with open(path, mode="a") as file:
            writer = csv.writer(file)
            if not file_exists:
                writer.writerow([
                    "Name",
                    "Login",
                    "Method",
                    "URL",
                    "Body",
                    "Headers",
                    "Response JSON",
                    "Response Status"
                ])
            writer.writerow([
                unittest.TestCase.id(self),
                "",
                "",
                "",
                "",
                "",
                "",
                "",
            ])
            for log in self.logs:
                writer.writerow([
                    "",
                    "" if log.login is None else log.login.login_id,
                    log.request.method,
                    log.request.url,
                    log.request.content.decode("utf-8"),
                    log.request.headers,
                    log.json,
                    log.status
                ])