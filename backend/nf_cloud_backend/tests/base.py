import csv
import os
from pathlib import Path
from unittest import TestCase
import unittest
from httpx import URL, Request, Response
from typing import Any

from fastapi.testclient import TestClient
from sqlmodel import SQLModel, Session

from ..main import app, engine
from .. import database

class DontCare:
    def __init__(self):
        pass

    def __str__(self):
        return "..."

DONT_CARE = DontCare()
"""
Special object that matches any JSON value.
"""

PartialJson = None | bool | int | float | str | list["PartialJson"] | dict[str, "PartialJson"] | DontCare
"""
Can be a JSON value or the special value DONT_CARE, which signifies that any value present is fine.
"""

def match_partial_json(actual: Any, expected: PartialJson) -> bool:
    """
    Returns true if actual is a JSON value that matches the specification given by expected.
    """

    if isinstance(expected, DontCare):
        return True    
    if isinstance(actual, list) and isinstance(expected, list):
        if len(actual) != len(expected):
            return False
        for i in range(len(actual)):
            if not match_partial_json(actual[i], expected[i]):
                return False
        return True
    if isinstance(actual, dict) and isinstance(expected, dict):
        if actual.keys() != expected.keys():
            return False
        for key in actual.keys():
            if not match_partial_json(actual[key], expected[key]):
                return False
        return True
    return actual == expected


class LogEntry:
    """
    Represents what is logged for each HTTP request sent to the app.
    """

    request: Request
    status: int
    json: Any


    def __init__(self, request: Request, status: int, json: Any):
        self.request = request
        self.status = status
        self.json = json


class Test(unittest.TestCase):
    """
    The abstract base for all MaCWorP tests.
    """

    name: str | None = None
    """
    The name of the test.
    """

    description: str | None = None
    """
    A description of what this test does.
    """

    client: TestClient
    """
    The FastAPI test client; capable of sending HTTP requests to the app.
    """

    logs: list[LogEntry]
    """
    Logs generated by this test.
    """


    # UTILITY METHODS


    def endpoint(self, path: str):
        url = os.getenv("MACWORP_TEST_URL") or ""
        return url + path


    def send(self, request: Request, status: int, json: PartialJson) -> Response:
        """
        Sends a HTTP request to the app, and ensures that it returns the correct status code and JSON.
        The request is appended to the logs.
        """

        print("Sending request:", request)
        response = self.client.send(request)
        actual_status = response.status_code
        actual_json = response.json()
        print("Got response:", actual_status, actual_json)
        
        self.assert_(match_partial_json(actual_json, json), f"JSON doesn't match: Expected {json}, got {actual_json}") 
        self.assertEqual(actual_status, status, f"Status doesn't match: Expected {status}, got {actual_status}")
        self.logs.append(LogEntry(request, actual_status, actual_json))
        return response
    

    _default_token: str | None = None
    @property
    def default_token(self) -> str:
        """
        Returns the token of the seeded default user.
        The token is cached, so only one authentication request will be performed.
        """
        
        if self._default_token is None:
            self._default_token = self.send(
                Request("POST", "https://localhost:8000/users/login/file/dev", json={ "login_id": "devuser", "password": "developer" }),
                200,
                { "jwt": DONT_CARE }
            ).json()["jwt"]
            assert self._default_token is not None
        return self._default_token
    
    
    def as_default(self, request: Request, status: int, json: PartialJson) -> Response:
        """
        Executes a request as the seeded default user.
        """
        
        request.headers["X-Token"] = self.default_token
        return self.send(request, status, json)


    _admin_token: str | None = None
    @property
    def admin_token(self) -> str:
        """
        Returns the token of the seeded admin user.
        The token is cached, so only one authentication request will be performed.
        """
        
        if self._admin_token is None:
            self._admin_token = self.send(
                Request("POST", "https://localhost:8000/users/login/file/dev", json={ "login_id": "devadmin", "password": "developer" }),
                200,
                { "jwt": DONT_CARE }
            ).json()["jwt"]
            assert self._admin_token is not None
        return self._admin_token
            

    def as_admin(self, request: Request, status: int, json: PartialJson) -> Response:
        """
        Executes a request as the seeded admin user.
        """

        request.headers["X-Token"] = self.default_token
        return self.send(request, status, json)
    

    # FRAMEWORK

    def setUp(self):
        """
        Performed before each test. Clears and seeds the test database.
        """

        seed_data_path = os.getenv("MACWORP_TEST_SEED_DATA")
        if (seed_data_path is None):
            raise RuntimeError("MACWORP_TEST_SEED_DATA environment variable not set")

        SQLModel.metadata.drop_all(engine)
        SQLModel.metadata.create_all(engine)

        self.logs = []
        self.client = TestClient(app)

        database.seed(Path(seed_data_path))

    
    def tearDown(self):
        """
        Performed after each test. Logs test metadata and all HTTP communication that was done in the test.
        """

        log_path = os.getenv("MACWORP_TEST_LOG")
        if log_path is not None:
            self.update_logs(Path(log_path))
        
        self.client.close()
        SQLModel.metadata.drop_all(engine)
    

    def update_logs(self, path: Path):
        """
        Writes logs for this test to CSV.
        """
        
        file_exists = os.path.isfile(path)
        with open(path, mode="a") as file:
            writer = csv.writer(file)
            if not file_exists:
                writer.writerow([
                    "Name",
                    "Description",
                    "Call Number",
                    "Method",
                    "URL",
                    "Body",
                    "Headers",
                    "Response JSON",
                    "Response Status"
                ])
            writer.writerow([
                self.name,
                self.description,
                "",
                "",
                "",
                "",
                "",
                "",
                "",
            ])
            for i, log in enumerate(self.logs):
                writer.writerow([
                    "",
                    "",
                    i + 1,
                    log.request.method,
                    log.request.url,
                    log.request.content.decode("utf-8"),
                    log.request.headers,
                    log.json,
                    log.status
                ])